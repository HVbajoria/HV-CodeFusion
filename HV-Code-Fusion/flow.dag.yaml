id: template_chat_flow
name: Template Chat Flow
environment:
  python_requirements_txt: requirements.txt
inputs:
  chat_history:
    type: list
  input_format:
    type: string
    default: The first line of the input contains an integer N representing the
      number of elements in the level-order array of the binary tree. The second
      line contains N space-separated integers, denoting the level order of the
      binary tree, where '-1' represents a null node.
  output_format:
    type: string
    default: Print the number of palindromic pathways connecting the root and leaf
      nodes.
  code:
    type: string
    default: "#include <bits/stdc++.h> using namespace std;  struct
      TreeNode{     int val;     TreeNode *left, *right;     TreeNode(int
      x){         val = x;         left = right = NULL;     } };  TreeNode*
      makeTree(int idx, int n, int arr[]){     if(idx >= n || arr[idx] ==
      -1)    return NULL;     TreeNode *root = new
      TreeNode(arr[idx]);     root->left = makeTree(2*idx+1, n,
      arr);     root->right = makeTree(2*idx+2, n, arr);     return root;
      }  void dfs(TreeNode *root, vector<int> &feq, int &count){     if(!root)
      return;     if(!root->left &&
      !root->right){         feq[root->val]++;         int odd =
      0;         for(int i = 0; i < 10; i++){         if(feq[i]%2 == 1)
      odd++;         }         feq[root->val]--;         if(odd < 2)
      count++;         return;     }     feq[root->val]++;     dfs(root->left,
      feq, count);         dfs(root->right, feq,
      count);     feq[root->val]--;     return; }  int main() {     int n; cin
      >> n;     int arr[n];     for(int i = 0; i < n; i++){         cin >>
      arr[i];     }     TreeNode *root = makeTree(0, n, arr);          int count
      = 0;     vector<int> feq(10, 0);     dfs(root, feq, count);     cout <<
      count << '\\n';    return 0; }"
  languages:
    type: string
    default: C, C++, C#, Python2, Python3, Java
outputs:
  answer:
    type: string
    reference: ${multilang_gen.output}
nodes:
- name: driver_code
  type: prompt
  source:
    type: code
    path: driver_code.jinja2
  inputs:
    input: ${inputs.input_format}
    output: ${inputs.output_format}
    solution: ${inputs.code}
  use_variants: false
- name: driver_code_gen
  type: llm
  source:
    type: code
    path: driver_code_gen.jinja2
  inputs:
    deployment_name: hvcodefusion
    temperature: 0.6
    top_p: 1
    response_format:
      type: text
    question: ${driver_code.output}
  provider: AzureOpenAI
  connection: azure_open_ai
  api: chat
  module: promptflow.tools.aoai
  use_variants: false
- name: multilang
  type: prompt
  source:
    type: code
    path: multilang.jinja2
  inputs:
    code: ${driver_code_gen.output}
    languages: ${inputs.languages}
  use_variants: false
- name: multilang_gen
  type: llm
  source:
    type: code
    path: multilang_gen.jinja2
  inputs:
    deployment_name: hvcodefusion
    temperature: 0.6
    top_p: 1
    response_format:
      type: text
    question: ${multilang.output}
    languages: ${inputs.languages}
  provider: AzureOpenAI
  connection: azure_open_ai
  api: chat
  module: promptflow.tools.aoai
  use_variants: false
